(set 'list '(1 2 3 4 5 6 7)) -- задание списка
______________________________________________
(if (= (mod 4 2) 0) 'true 'false) -- проверка на четность
_________________________________________________________
(defun dev (s)
(if (equal s nil) nil
(if (equal (mod (car s) 2) 0) (dev (cdr s)) (cons (car s) (dev (cdr s))) )
)
) -- функция, удаляющая из списка чётные элементы
__________________________________________________________________________



(defun fact (n) (if (= n 0) 1 (* n (fact (- n 1)))))
___________________________________________________
(defun gcd (m n) (if (= n 0) m (gcd n (mod m n))))
_____________________________________________________
(defun pow (m n) (if (= n 0) 1 (* m (pow m (- n 1)))))
______________________________________________________
(defun count (s) (if (eq s nil) 0 (+ 1 (count (cdr s)))))
__________________________________________________________
(defun sum (s) (if (eq s nil) 0 (+ (car s) (sum (cdr s)))))
_________________________________________________________________
(defun max1 (x) (IF (equal x nil) 0 (max (car x) (max1 (cdr x)))))
___________________________________________________________
(DEFUN LASTM (X) (IF (EQUAL (CDR X) NIL) X (LASTM (CDR X))))
__________________________________________________________________________
(defun dell (s) (if (equal (cdr s) nil) nil (cons (car s) (dell (cdr s)))))
_______________________________________________________________________
(defun lastitem (s) (if (equal (cdr s) nil) (car s) (lastitem (cdr s))))
_______________________________________________________________________
(defun append (s r) (cons (car s) r))
_________________________________________________________________________________
(defun inverse (s) (if (equal s nil) nil (cons (lastitem s)) (inverse (dell s))))
_________________________________________________________________________________
(cons 1 '(2 3)) = (1 2 3)
___________________________
f:
если первый эл-т nil
  возвращаем nil
  если остаток от деления первого эл-та на 2 равен 0
    возвращаем f(список без первого эл-та)
    возвращаем конкатенацию первый эл-т списка на f(остаток списка)

КР1:
(defun dev (s) (if (equal s nil) nil (
  if (equal (mod (car s) 2) 0) (dev (cdr s)) (cons (car s) (dev (cdr s))))))


  (defun fact (n) (if (= n 0) 1 (* n (fact (- n 1))))) ;факториал
  (defun d (n) ())
  (defun gcd (m n)

  	)


  (defun gcd (m n)
  (if  (or (= a 0) (= b 0))
  	(if  (= a 0) (let ((gcd b)))
  		 (let ((gcd a))))
  else
  (if (>= a b) (let ((gcd gcd() ))
  nod:= nod( a mod b, b)
  else
  nod:= nod( a, b mod a)
  )
